<!DOCTYPE html>
<html>

<head>
    <title data-msgid="Histogram">Histogram</title>
    <link rel="stylesheet" href="/estat/eStat/css/eStatU.css">
    <script src="/estat/eStat/lib/d3/d3.v4.min.js"></script>
    <script src="/estat/eStat/lib/jquery/jquery-3.2.1.min.js"></script>
    <script src="/estat/eStat/lib/jquery/jquery-ui.min.js"></script>
    <script src="/estat/eStat/lib/DistributionsUtil.js" ></script>
    <script src="/estat/eStat/js/language.js" ></script>
    <script src="/estat/eStat/js/eStatU.js"></script>
    <script src="/estat/eStat/lib/FileSaver.min.js" ></script>
    <script src="/estat/eStat/lib/convertSVG.js"></script>
</head>

<body>

  <div width="640" height="640" style="position:absolute; left:10px; top:0px"> 
    <br>
    <div class="title">
      <b>&nbsp; <span data-msgid="Histogram"></span> - <span data-msgid="Frequency Table"></span></b> 
      <a class="menu" href="index.html"><b><span data-msgid="Menu">Menu</span></b></a>   
    </div>
    <p>     
    <b>[<span data-msgid="input data">Data Input</span>]</b>&nbsp; <input type="text" size=70 id="data1">
    <table class="stat">
        <tr>
          <td><span data-msgid="NumberData">Data Size</span></td>
          <td><span class="fontmath">n</span></td>
          <td><input type="text" size=8 id="nn" style="text-align: right;"></td>
          <td></td>
          <td><span id="msgMin"></span></td>
          <td><span class="fontmath">min</span></td>
          <td><input type="text" size=8 id="mini" style="text-align: right;"></td>
        </tr>
        <tr>
          <td><span data-msgid="Sample Mean">Sample Mean</span></td>
          <td><span class="fontmath">x&#772;</span></td>
          <td><input type="text" size=8 id="xbar" style="text-align: right;"></td>
          <td></td>
          <td><span id="msgMax"></span></td>
          <td><span class="fontmath">max</span></td>
          <td><input type="text" size=8 id="maxi" style="text-align: right;"></td>
        </tr>
        <tr>
          <td><span data-msgid="Sample Variance">Sample Variance</span>(n-1)</td>
          <td><span class="fontmath">s<sup>2</sup></span></td>
          <td><input type="text" size=8 id="variS" style="text-align: right;"></td>
          <td></td>
          <td><span data-msgid="Sample"></span> <span data-msgid="Std Deviation"></span></td>
          <td><span class="fontmath">s</span></td>
          <td><input type="text" size=8 id="stdS" style="text-align: right;"></td>
        </tr>
    </table>
    <br>
    <table>
      <tr>
        <td><b><span data-msgid="Interval Start">구간시작</span></b></td>
        <td>&nbsp;<input type="text" size=6 id="start" style="text-align: right;"></td>
        <td><span style="color:red">( &le; min )</span></td>
        <td><b><span data-msgid="y title">y title</span></b></td>
        <td>&nbsp;<input type="text" size=15 id="ytitle"></td>
      </tr>
      <tr>
        <td><b><span data-msgid="Interval Width">구간너비</span></b></td>
        <td>&nbsp;<input type="text" size=6 id="xstep" style="text-align: right;"></td>
        <td>&nbsp;&nbsp;</td>
        <td><b><span data-msgid="x title">x title</span></b></td>
        <td>&nbsp;<input type="text" size=15 id="xtitle"></td>
      </tr>
      <tr>
        <td><b><span data-msgid="Main Title">Main Title</span></b></td>
        <td colspan="4">&nbsp;<input type="text" size=50 id="mtitle"></td>
        <td>&nbsp;&nbsp;</td>
        <td><b><span data-msgid="Histogram"></span> <span data-msgid="oneColor"></span></b></td>
        <td><input type="color"id="data104" onclick="changeColor(10)" width="100px"></td>
      </tr>
    </table>    
    <br>
    <button type="button" id="execute" >
        <span data-msgid="Execute">Execute</span>
    </button> 
    <p>
    <svg id="chart" width="640" height="500"> </svg>
    <br>
    <button type="button" id="saveGraphU" >
	<span class="tooltiptext" data-msgid="Graph Save">Graph Save</span>
    </button>
    <label>&nbsp;<input type="checkbox" id="HistMean"><span data-msgid="Mean">평균</span></label>
    <label><input type="checkbox" id="HistFreq"><span data-msgid="Frequency">도수</span></label>
    <label><input type="checkbox" id="HistLine"><span data-msgid="Frequency Polygon">도수분포다각형</span></label> &nbsp
    <button type="button" id="HistTable"><span data-msgid="Frequency Table">도수분포표</span></button>
    <div width="650" > 
      <p>
      <div id="screenTable">
        <div id="loc">
        </div>
      </div>
    </div>
  </div>
  
  <script>
      var chart = d3.select("#chart")
      var svgWidth    = 640;
      var svgHeight   = 500;  
      var margin, graphWidth, graphHeight;
      margin      = {top: 80, bottom: 50, left: 80, right: 20};
      graphWidth  = svgWidth - margin.left - margin.right;
      graphHeight = svgHeight - margin.top - margin.bottom;
      var histColor = "#00FFFF";

      var i, j, k, ith;
      var x1, x2, y1, y2, cx, cy, ty;
      var nint, step, buffer, nvalue; 
      var nobs, mean, variS, stdS, mini, maxi, start, xstep;
      var nvalueH, gxminH, gxmaxH, gyminH, gymaxH, xgap, xwidth, Histogram;
      var mTitle, yTitle, xTitle;
      var rowMax = 100;
      var dint = new Array(rowMax);
      var freq = new Array(rowMax);

      document.getElementById("data104").value= histColor;
      document.getElementById("msgMin").innerHTML = svgStr[45][langNum]; 
      document.getElementById("msgMax").innerHTML = svgStr[47][langNum]; 
      document.getElementById("nn").disabled    = true;    
      document.getElementById("xbar").disabled  = true; 
      document.getElementById("variS").disabled = true;  
      document.getElementById("stdS").disabled  = true;   
      document.getElementById("mini").disabled  = true;  
      document.getElementById("maxi").disabled  = true;  

      // data input control =====================================
      d3.select("#data1").on("input", function() {
        stat = simplestat2("#data1");  
        document.getElementById("nn").value    = stat.n;    
        document.getElementById("xbar").value  = f2(stat.xbar);
        variS = stat.var;
        stdS  = Math.sqrt(variS);
        document.getElementById("variS").value = f2(variS);  
        document.getElementById("stdS").value  = f2(stdS);  
        document.getElementById("mini").value  = f2(stat.mini);  
        document.getElementById("maxi").value  = f2(stat.maxi);
      });

      updateData = function() {
        document.getElementById("data1").value = ''; 
      }

      // Draw Histogram ======================================
      d3.select("#execute").on("click",function() {
        chart.selectAll("*").remove();
        nobs  = stat.n;  
        mean  = stat.xbar;  
        mini  = stat.mini;  
        maxi  = stat.maxi;    
        start = d3.select("#start").node().value;
        xstep = d3.select("#xstep").node().value;
        histColor = document.getElementById("data104").value;
        // input check
        if ( nobs > 100) {
           chart.append("text").attr("class","mean").attr("x", 250).attr("y", 100)
                .text("number of observations should be less than 100 !!   Try again.").style("stroke","red");
           return;
        }
        if ( start == "" || xstep == "" || isNaN(start) || isNaN(xstep) ) {
           chart.append("text").attr("class","mean").attr("x", 250).attr("y", 100)
                .text("No input or wrong input !!   Try again.").style("stroke","red");
           return;
        }
        else {
          start = parseFloat(start);
          xstep = parseFloat(xstep);
        }
        mTitle = d3.select("#mtitle").node().value;
        yTitle = d3.select("#ytitle").node().value;
        xTitle = d3.select("#xtitle").node().value;
        if (yTitle == "") yTitle = svgStr[16][langNum];
        if (start > mini) start = mini
        var para = drawHistogram(nobs, start, xstep, data, dint, freq);
        Histogram = true;
        nvalueH = para.a;
        gxminH  = start;
        gxmaxH  = para.b;
        gyminH  = para.c;
        gymaxH  = para.d;
        xgap    = para.e;
        xwidth  = para.f;
      })

      // 히스토그램 평균표시
      d3.select("#HistMean").on("click", function() {
        if (Histogram == false) return;
        if (this.checked) {
          checkHistMean = true;
          showHistMean(mean, gxminH, gxmaxH, xgap, xwidth);
        } else {
          checkHistMean = false;
          removeHistMean();
        }
      })
      // 히스토그램 도수표시
      d3.select("#HistFreq").on("click", function() {
        if (Histogram == false) return;
        if (this.checked) {
          checkHistFreq = true;
          showHistFreq(nvalueH, xstep, dint, freq, gxminH, gxmaxH, gyminH, gymaxH, xgap, xwidth);
        } else {
          checkHistFreq = false;
          removeHistFreq();
        }
      })
      // 히스토그램 꺽은선그래프 표시
      d3.select("#HistLine").on("click", function() {
        if (Histogram == false) return;
        if (this.checked) {
          checkHistLine = true;
          showHistLine(nvalueH, xstep, dint, freq, gxminH, gxmaxH, gyminH, gymaxH, xgap, xwidth);
        } else {
          checkHistLine = false;
          removeHistLine()
        }
      })
      // 히스토그램 도수분포표 표시
      d3.select("#HistTable").on("click", function() {;
        if (Histogram == false) return;
        showHistTable(nvalueH, dint, freq)
      })

      // svg Graph Save
      d3.select("#saveGraphU").on("click", function() {
        var svg = d3.select("#chart");
        var width  = svgWidth;
        var height = svgHeight;
        var svgString = getSVGString(svg.node());
        svgString2Image(svgString, width, height, 'png', save);
        function save(dataBlob, filesize) {
          saveAs(dataBlob, 'eStatGraphU.png');
        }
      });

    // basic statistics function ============================================
    simplestat2 = function(dataid) {
        data = d3.select(dataid)
	         .node()
	         .value
	         .trim()
	         .split(new RegExp("[ ]*[, \t][ ]*"))   // ['8', '8', '9']
	         .map(parseFloat);                      // [8.0, 8.0, 9.0]
	if(isNaN(data[0])) data = [];
        n = data.length;
        sum = 0;
        sumsq = 0;
        data.forEach(function(d) {
          sum += d;
          sumsq += d*d;
        });
        xbar = sum / n;
        v = (sumsq - n*xbar*xbar) / (n-1);
        s = Math.sqrt(v)
        data.sort(function(a, b) { return a - b; });
        mini  = data[0];
        maxi  = data[n-1];
        range = maxi - mini;
        medi = medianCalc(n,data);
        var tdata = new Array(n);
        var ntemp; 
        if (n%2 == 1) { // odd
          ntemp = (n+1)/2;
          for (i=0; i<ntemp; i++) tdata[i] = data[i];
          q1 = medianCalc(ntemp,tdata)
          for (i=ntemp-1; i<n; i++) tdata[i-ntemp+1] = data[i];
          q3 = medianCalc(ntemp,tdata)
        }
        else {
          ntemp = n/2;
          for (i=0; i<ntemp; i++) tdata[i] = data[i];
          q1 = medianCalc(ntemp,tdata)
          for (i=ntemp; i<n; i++) tdata[i-ntemp] = data[i];
          q3 = medianCalc(ntemp,tdata)
        }
        iqr = q3 - q1;
        return {'n':n, 'xbar':xbar, 'var':v, 'std':s, 'mini':mini, 'q1':q1, 'medi':medi, 'q3':q3, 'maxi':maxi, 'range':range, 'iqr':iqr};
  }
  // median calculation
  function medianCalc(n, data) {
        if (n < 2) return;
        if (n%2 == 1) { // odd
          return data[(n+1)/2 -1];
        }
        else { // even
          return ( data[n/2 -1] + data[(n+2)/2 -1] ) / 2.;
        }
  }

  // Counting frequency of each histogram interval
  function HistIntervalFreq(tobs, nvalueH, dataA, dataValueH, dvalueFreq) {
    var i, j, k;
    for (i = 0; i <= nvalueH ; i++) {
        dvalueFreq[i] = 0;
    }
    for (i = 0; i < tobs; i++) {
        k = 1;
        for (j = k; j <= nvalueH; j++) {
            if (dataA[i] < dataValueH[j]) {
                dvalueFreq[j]++;
                break;
            } else {
                k++;
            }
        } // endof j
    } // endof i
  }

  // 히스토그램 그리기 함수 -----------------------------------------------------------------------------------------------
  function drawHistogram(nobs, gxminH, xstep, data, dataValueH, dvalueFreq) {
    var i, j, k;
    var label, tempx, tempy, tempw, temph, xgap, xwidth;
    var nvaluH, gxminH, gxmaxH, gxrangeH, gyminH, gymaxH, gyrangeH, freqmax;

    var dataA = new Array(rowMax);
//    var dataValueH = new Array(rowMax); // 각 구간값: 최대 구간의 수 =199개
//    var dvalueFreq = new Array(rowMax); // 각 구간도수  

    // 히스토그램 bins, 전체 데이터 최소 최대 계산
    nvalueH = 0;
    dataValueH[0] = gxminH;
    while (dataValueH[nvalueH] <= maxi) {
        nvalueH++;
        dataValueH[nvalueH] = dataValueH[nvalueH - 1] + xstep;
    }
    gxmaxH   = dataValueH[nvalueH];
    gxrangeH = gxmaxH - gxminH;
    xgap     = graphWidth / (nvalueH + 2); // 좌우갭
    xwidth   = graphWidth - 2 * xgap; // 좌우 갭을 뺀 실제 x 너비

    // 히스토그램 그리기
    freqmax = 0;
    HistIntervalFreq(nobs, nvalueH, data, dataValueH, dvalueFreq);

    for (j = 0; j <= nvalueH; j++) {
        if (dvalueFreq[j] > freqmax) freqmax = dvalueFreq[j];
    }
    gyminH = 0;
    gymaxH = freqmax + Math.floor(freqmax / 8 + 1);
    gyrangeH = gymaxH - gyminH;

    // 전체 제목
    drawTitle(mTitle, yTitle, xTitle);
    // 아래 축그리기
    drawHistAxis(nvalueH, dataValueH, gxminH, gxmaxH, gyminH, gymaxH, graphWidth, graphHeight);
    // 히스토그램
    tempw = xwidth * xstep / gxrangeH; // 막대 너비
    for (i = 1; i <= nvalueH; i++) {
            tempx = margin.left + xgap + xwidth * (dataValueH[i - 1] - gxminH) / gxrangeH;
            tempy = margin.top + graphHeight - graphHeight * (dvalueFreq[i] - gyminH) / gyrangeH;
            temph = graphHeight * (dvalueFreq[i] - gyminH) / gyrangeH;
            chart.append("rect")
                .style("fill", histColor)
                .attr("class", "bar")
                .style("stroke", "black")
                .style("stroke-width", "1px")
                .attr("x", tempx)
                .attr("width", tempw)
                .attr("height", 0)
                .attr("y", margin.top + graphHeight)
                .transition() // 애니매이션 효과 지정
                .delay(function(d, i) {
                    return i * 250;
                }) // 0.5초마다 그리도록 대기시간 설정
                .duration(1000) // 2초동안 애니매이션이 진행되도록 설정
                .attr("y", tempy)
                .attr("height", temph)
    } // endof i

    return { a: nvalueH, b: gxmaxH, c: gyminH, d: gymaxH, e: xgap, f: xwidth };
  }
  // 히스토그램 y축, x축 그리기
  function drawHistAxis(nvalueH, dataValueH, gxminH, gxmaxH, gyminH, gymaxH, graphWidth, graphHeight) {
    var i, j, k;
    var tx, ty, x1, x2, y1, y2, z1, z2;
    var gxrangeH = gxmaxH - gxminH;
    var xgap     = graphWidth / (nvalueH + 2); // 좌우갭
    var xwidth   = graphWidth - 2 * xgap; // 좌우 갭을 뺀 실제 x 너비
    var ygrid    = new Array(rowMax);

    // Y축 그리기
    var yScale = d3.scaleLinear().domain([gyminH, gymaxH]).range([graphHeight, 0]);
    ygrid = yScale.ticks();
    tx = margin.left;
    ty = margin.top;
    chart.append("g")
         .attr("class", "axis")
         .attr("transform", "translate(" + tx + ", " + ty + ") ")
         .call(d3.axisLeft(yScale))
    chart.append("line")
         .attr("x1", margin.left + graphWidth)
         .attr("x2", margin.left + graphWidth)
         .attr("y1", margin.top)
         .attr("y2", margin.top + graphHeight)
         .style("stroke", "black")
    // Y축 그리드
    for (i = 1; i < ygrid.length; i++) {
      ty = margin.top + yScale(ygrid[i]);
      chart.append("line")
           .attr("x1", margin.left)
           .attr("x2", margin.left + graphWidth)
           .attr("y1", ty)
           .attr("y2", ty)
           .style("stroke", "lightgrey")
    }
    // 히스토그램의 x축 선
    tx = margin.left;
    ty = margin.top;
    chart.append("line")
         .attr("x1", tx)
         .attr("x2", margin.left + graphWidth)
         .attr("y1", ty)
         .attr("y2", ty)
         .style("stroke", "black")
    ty = margin.top + graphHeight;
    chart.append("line")
         .attr("x1", tx)
         .attr("x2", margin.left + graphWidth)
         .attr("y1", ty)
         .attr("y2", ty)
         .style("stroke", "black")
    // 히스토그램의 x축 아래 tick, value 값선
    y1 = margin.top + graphHeight;
    y2 = y1 + 5;
    for (i = 0; i <= nvalueH; i++) {
        x1 = margin.left + xgap + xwidth * (dataValueH[i] - gxminH) / gxrangeH;
        x2 = x1;
        chart.append("line")
            .attr("x1", x1)
            .attr("x2", x2)
            .attr("y1", y1)
            .attr("y2", y2)
            .style("stroke", "black")
        // x 그리드
        chart.append("line")
            .attr("x1", x1)
            .attr("x2", x2)
            .attr("y1", y1)
            .attr("y2", margin.top)
            .style("stroke", "lightgrey")
        chart.append("text")
            .attr("class", "myaxis")
            .style("text-anchor", "middle")
            .style("font-family", "sans-serif")
            .style("font-size", "7px")
            .style("font-family", "sans-serif")
            .style("stroke", "#0055FF")
            .attr("x", x1)
            .attr("y", y2 + 15)
            .text(f2(dataValueH[i]))
    }
  }

  // 그래프 제목 쓰기 함수
  function drawTitle(mTitle, yTitle, xTitle) {
    // 주제목
    chart.append("text")
        .attr("x", margin.left + graphWidth/2)
        .attr("y", margin.top / 2 + 10)
        .style("font-size", "20px")
        .style("font-family", "sans-seirf")
        .style("stroke", "black")
        .style("text-anchor", "middle")
        .text(mTitle)
    // X축 제목
    chart.append("text")
            .style("font-size", "12px")
            .style("font-family", "sans-seirf")
            .style("stroke", "black")
            .style("text-anchor", "middle")
            .attr("x", margin.left + graphWidth / 2)
            .attr("y", margin.top + graphHeight + margin.bottom / 2 + 10)
            .text(xTitle)
     // Y축 제목
     var tx = margin.left / 2 - 30;
     var ty = margin.top + 15;
     chart.append("text")
            .style("font-size", "12px")
            .style("font-family", "sans-seirf")
            .style("stroke", "black")
            .style("text-anchor", "end")
            .attr("x", tx)
            .attr("y", ty)
            .text(yTitle)
            .attr("transform", "rotate(-90 30 100)")
  }

  // 히스토그램 평균 표시 함수
  function showHistMean(avg, gxminH, gxmaxH, xgap, xwidth) {
    var tempx, tempy;
    var gxrangeH = gxmaxH - gxminH;

    if (isNaN(avg)) return;
    tempx = margin.left + xgap + xwidth * (avg - gxminH) / gxrangeH;
    tempy = margin.top + 5;
    chart.append("line")
         .attr("class", "histmean")
         .attr("x1", tempx)
         .attr("y1", tempy + 30)
         .attr("x2", tempx)
         .attr("y2", tempy + graphHeight)
    chart.append("text")
         .attr("class", "histmean")
         .style("stroke", "red")
         .style("text-anchor", "middle")
         .style("font-family", "sans-serif")
         .style("font-size", "7pt")
         .attr("x", tempx)
         .attr("y", tempy + graphHeight + 5)
         .text(svgStr[34][langNum] + "=" + f2(avg))
  }

  // 히스토그램 평균표시 제거 함수
  function removeHistMean() {
    chart.selectAll("line.histmean").remove();
    chart.selectAll("circle.histmean").remove();
    chart.selectAll("text.histmean").remove();
  }
  
  // 히스토그램 도수 표시 함수
  function showHistFreq(nvalueH, xstep, dataValueH, freq, gxminH, gxmaxH, gyminH, gymaxH, xgap, xwidth) {
    var x1, y1;
    var gxrangeH = gxmaxH - gxminH;
    var gyrangeH = gymaxH - gyminH;

    for (var i = 1; i <= nvalueH; i++) {
        x1 = margin.left + xgap + xwidth * (dataValueH[i - 1] + xstep / 2 - gxminH) / gxrangeH;
        y1 = margin.top + graphHeight - graphHeight * (freq[i] - gyminH) / gyrangeH;
        chart.append("text")
             .attr("class", "histfreq")
             .style("stroke", "red")
             .style("text-anchor", "middle")
             .style("font-family", "sans-serif")
             .style("font-size", "8pt")
             .attr("x", x1)
             .attr("y", y1 - 4)
             .text(freq[i])
    }
  }

  // 히스토그램 도수 제거 함수
  function removeHistFreq() {
    chart.selectAll("text.histfreq").remove();
  }


  // 히스토그램 도수분포다각형 표시 함수
  function showHistLine(nvalueH, xstep, dataValueH, freq, gxminH, gxmaxH, gyminH, gymaxH, xgap, xwidth) {
    var i, k;
    var gxrangeH = gxmaxH - gxminH;
    var gyrangeH = gymaxH - gyminH;
    // left gap part
        x1 = margin.left + xgap + xwidth * (dataValueH[0] - xstep / 2 - gxminH) / gxrangeH;
        y1 = margin.top  + graphHeight;
        x2 = margin.left + xgap + xwidth * (dataValueH[0] + xstep / 2 - gxminH) / gxrangeH;
        y2 = margin.top  + graphHeight - graphHeight * (freq[1] - gyminH) / gyrangeH;
        chart.append("circle")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("cx", x1)
             .attr("cy", y1)
             .attr("r", 3)
        chart.append("line")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("x1", x1)
             .attr("x2", x2)
             .attr("y1", y1)
             .attr("y2", y2)
        chart.append("circle")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("cx", x2)
             .attr("cy", y2)
             .attr("r", 3)
    // main polygon
    for (i = 1; i < nvalueH; i++) {
        x1 = margin.left + xgap + xwidth * (dataValueH[i - 1] + xstep / 2 - gxminH) / gxrangeH;
        y1 = margin.top  + graphHeight - graphHeight * (freq[i] - gyminH) / gyrangeH;
        x2 = margin.left + xgap + xwidth * (dataValueH[i] + xstep / 2 - gxminH) / gxrangeH;
        y2 = margin.top  + graphHeight - graphHeight * (freq[i + 1] - gyminH) / gyrangeH;
        chart.append("circle")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("cx", x1)
             .attr("cy", y1)
             .attr("r", 3)
        chart.append("line")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("x1", x1)
             .attr("x2", x2)
             .attr("y1", y1)
             .attr("y2", y2)
        chart.append("circle")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("cx", x2)
             .attr("cy", y2)
             .attr("r", 3)
    }
    // right gap part
        x1 = margin.left + xgap + xwidth * (dataValueH[nvalueH - 1] + xstep / 2 - gxminH) / gxrangeH;
        y1 = margin.top  + graphHeight - graphHeight * (freq[nvalueH] - gyminH) / gyrangeH;
        x2 = margin.left + xgap + xwidth * (dataValueH[nvalueH] + xstep / 2 - gxminH) / gxrangeH;
        y2 = margin.top  + graphHeight;
        chart.append("circle")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("cx", x1)
             .attr("cy", y1)
             .attr("r", 3)
        chart.append("line")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("x1", x1)
             .attr("x2", x2)
             .attr("y1", y1)
             .attr("y2", y2)
        chart.append("circle")
             .attr("class", "histline")
             .style("stroke", "red")
             .style("stroke-width", "2px")
             .attr("cx", x2)
             .attr("cy", y2)
             .attr("r", 3)
  }

  // 히스토그램 도수분포다각형 제거
  function removeHistLine() {
    chart.selectAll("line.histline").remove();
    chart.selectAll("circle.histline").remove();
  }

  // 히스토그램 도수분포표 
  function showHistTable(nvalueH, dataValueH, freq) {
    var screenTable = document.getElementById("screenTable");
    var table = document.createElement('table');
    loc.appendChild(table);

    var i, j, k, totsum, avgH, temp, row;
    var cell = new Array(5);
    var ncol = 4;

    totsum = 0;
    for (i = 0; i < nvalueH; i++) {
       totsum += freq[i+1];
    }

    table.style.fontSize = "13px";
    k = 0;
    row = table.insertRow(k);
    row.style.height = "35px";
    for (j = 0; j < 1; j++) {
        cell[j] = row.insertCell(j);
        cell[j].style.backgroundColor = "#eee";
        cell[j].style.textAlign = "center";
        cell[j].style.border = "1px solid black";
    }
    cell[0].style.width = "200px";
    cell[0].innerHTML = svgStr[36][langNum];  //  Histogram Frequency Table

    k++;
    row = table.insertRow(k);
    row.style.height = "30px";
    for (j = 0; j < ncol; j++) {
        cell[j] = row.insertCell(j);
        cell[j].style.textAlign = "center";
        cell[j].style.backgroundColor = "#eee";
        cell[j].style.border = "1px solid black";
    }
    cell[0].innerHTML = svgStr[38][langNum] ; // 계급구간
    cell[1].innerHTML = svgStr[118][langNum]; // 계급값
    cell[2].innerHTML = svgStr[16][langNum];  // 도수
    cell[3].innerHTML = svgStr[30][langNum];  // 상대도수

    avgH = 0;
    for (i = 0; i < nvalueH; i++) {
        k++;
        row = table.insertRow(k);
        row.style.height = "30px";
        for (j = 0; j < ncol; j++) {
          cell[j] = row.insertCell(j);
          cell[j].style.width = "110px";
          cell[j].style.textAlign = "right";
          cell[j].style.border = "1px solid black";
        }
        cell[0].innerHTML =  f2(dataValueH[i]) + " &le; ~ &lt; " + f2(dataValueH[i + 1]);
        cell[0].style.backgroundColor = "#eee";
        cell[0].style.textAlign = "center";
        temp  = (dataValueH[i]+dataValueH[i + 1])/2;
        avgH += temp * freq[i+1];
        cell[1].innerHTML = f2(temp) ;
        cell[2].innerHTML = freq[i + 1].toString();
        cell[3].innerHTML = f2(freq[i + 1] / totsum);
    }
    avgH = avgH / totsum; // 도수분포에 의한 평균
    // 합계 출력
    k++;
    row = table.insertRow(k);
    row.style.height = "30px";
    for (j = 0; j < ncol; j++) {
        cell[j] = row.insertCell(j);
        cell[j].style.textAlign = "right";
        cell[j].style.backgroundColor = "#eee";
        cell[j].style.border = "1px solid black";
    }
    cell[0].style.textAlign = "center";
    cell[0].innerHTML = svgStr[23][langNum];  //합계 
    cell[2].innerHTML = totsum;
    cell[3].innerHTML = f2(1);
    // 도수분포 평균 출력
    k++;
    row = table.insertRow(k);
    row.style.height = "30px";
    for (j = 0; j < 2; j++) {
        cell[j] = row.insertCell(j);
        cell[j].style.textAlign = "right";
        cell[j].style.backgroundColor = "#eee";
        cell[j].style.border = "1px solid black";
    }
    cell[0].style.textAlign = "center";
    cell[0].innerHTML = svgStr[118][langNum] +" " + svgStr[34][langNum];  // 계급값 평균 
    cell[1].innerHTML = f2(avgH);

    // 다음 표와의 공백을 위한 것
    k++;
    row = table.insertRow(k);
    row.style.height = "20px";
  }

  // Change Color
  function changeColor(){
     histColor = document.getElementById("data104").value ;
  }
  </script>

</body>
</html>
